<?php
/**
 * @file
 * Main codes for search_drupal_problem.
 *
 * Currently supported source is drupal.org projects issue queue,
 * more could be added, presumably by adding a plugin system.
 */

/**
 * Implements hook_menu().
 */
function search_drupal_problem_menu() {
  $paths = array(
    'search-drupal-problem' => array(
      'page callback' => 'drupal_get_form',
      'page arguments' => array('search_drupal_problem_form_view'),
      'file' => 'search_drupal_problem_form.inc',
      'access callback' => TRUE,
    ),
    'drupal-issue-scraper' => array(
      'page callback' => '_search_drupal_problem_drupal_issue_scrapper',
      'access callback' => TRUE,
    ),
  );

  return $paths;
}

/**
 * The heart of this module, run on form submit.
 */
function _search_drupal_problem_execute($search_term, $project) {
  drupal_add_library('system', 'drupal.ajax');

  // The return value.
  $prefix = '<ul><li>';
  $content = '';
  $suffix = '</li></ul>';

  // Run a query to search for an issue given the query and contributed
  // module name (in reverse order) on drupal.org
  // additional parameter removed: &categories=bug&version=All
  $search_term = explode(' ', drupal_strtolower($search_term));
  $url_encoded_search_term = implode('+', $search_term);
  // Seems like the advance issues page use a user friendly name, rather than
  // the project url path (eg. Display Suite instead of ds).
  $project = explode(' ', drupal_strtolower($project));
  $project = implode('+', $project);
  if (empty($project)) {
    $project_fragment = '';
  }
  else {
    $project_fragment = '&projects=' . $project;
  }
  $fullurl = 'http://drupal.org/project/issues?text=' . $url_encoded_search_term . $project_fragment . '&status=All';

  $content .= '<h2><a href="' . $fullurl . '">Drupal issue queue</a></h2>';

  // Implicit curl fetch on the $fullurl.
  $htmlsource = @file_get_contents($fullurl);
  if ($htmlsource === FALSE) {
    drupal_set_message(t('Unable to fetch the content of @url', array('@url' => $fullurl)), 'error');
    return $prefix . $content . $suffix;
  }

  // HTML5 parser, we can't just use the DOMDocument.
  require_once 'HTML5/Parser.php';
  $html5lib = HTML5_Parser::parse($htmlsource);
  $xhtml = $html5lib->saveXml();

  $dom = new DOMDocument();
  if (!$dom->loadHTML($xhtml)) {
    drupal_set_message(t('Unable to parse html from @url', array('@url' => $fullurl)), 'error');
    return $prefix . $content . $suffix;
  }

  // Get the result's html table element.
  $xpath = new DOMXPath($dom);
  $elems = $xpath->query('//table[contains(concat(" ", normalize-space(@class), " "), " project-issue ")]/tbody/tr');

  $ajax_args = array(
    'search_term' => $search_term,
  );
  $unique_id = 1;

  if (!is_null($elems)) {
    // List of ajax callback to try to fetch issue details by ajax on document.ready().
    $ajax_issue_list = array();

    $content .= '<ul>';
    foreach ($elems as $elem) {
      $nodes = $elem->childNodes;
      $content .= '<li><p>';
      if (empty($project)) {
        $content .= '<strong>Project: </strong>' . $dom->saveHTML($nodes->item(0)) . '<br>';
      }
      $content .= '<strong>Title: </strong>' . $dom->saveHTML($nodes->item(2)) . '<br>';
      // Gets the href attribute of a <a> child element, damn you complicated OOP!
      // I assumes there will always be an <a>, may need to check otherwise?
      $url = 'http://drupal.org' . $nodes->item(2)->getElementsByTagName('a')->item(0)->getAttribute('href');

      $ajax_args['url'] = $url;
      $ajax_args['container'] = 'item' . $unique_id;
      $unique_id += 1;

      $content .= '<strong>Status: </strong>' . check_plain($nodes->item(4)->nodeValue) . ', ' . check_plain($nodes->item(8)->nodeValue) . '<br>';
      // There used to be version information here, RIP.

      $content .= '<strong>Comment: </strong>';
      $content .= (empty($nodes->item(10)->nodeValue)) ? '0' : check_plain($nodes->item(10)->nodeValue);
      $content .= ', last comment ' . check_plain($nodes->item(12)->nodeValue) . '<br>';

      $content .= '</p>';

      $ajax_callback_url = '/drupal-issue-scraper/nojs/' . rtrim(strtr(base64_encode(serialize($ajax_args)), '+/', '-_'), '=');
      $ajax_issue_list[] = str_replace('nojs', 'ajax', $ajax_callback_url);
      $content .= '<a id="' . $ajax_args['container'] . '" class="use-ajax" href="' . $ajax_callback_url . '">Read more.</a>';
      $content .= '</li>';
    }
    $content .= '</ul>';

    drupal_add_js(array('search_drupal_problem' => array('issue_list' => $ajax_issue_list)), 'setting');
    $js = <<<EOT
jQuery('document').ready(function($){
  for (var i in Drupal.ajax) {
    $(Drupal.ajax[i].element).trigger('click');
  }
});
EOT;
    drupal_add_js($js, array('type' => 'inline', 'scope' => 'footer'));
  }

  return $prefix . $content . $suffix;
}

/**
 * Fetch relevant drupal issue page.
 * Looks for which comments in drupal issue queue that has our query in them.
 */
function _search_drupal_problem_drupal_issue_scrapper($ajax = 'ajax', $encoded_args = NULL) {
  if (is_null($encoded_args)) {
    return '';
  }

  $args = unserialize(base64_decode(str_pad(strtr($encoded_args, '-_', '+/'), strlen($encoded_args) % 4, '=', STR_PAD_RIGHT)));
  $url = $args['url'];
  $search_term = $args['search_term'];
  $container = $args['container'];


  $prefix = '<details><summary>Read more.</summary>';
  $content = '';
  $suffix = '</details>';

  // Implicit curl fetch on the $fullurl.
  $htmlsource = @file_get_contents($url);
  if ($htmlsource === FALSE) {
    drupal_set_message(t('Unable to fetch the content of @url', array('@url' => $url)), 'error');
    return $prefix . $content . $suffix;
  }

  // HTML5 parser, we can't just use the DOMDocument.
  require_once 'HTML5/Parser.php';
  $html5lib = HTML5_Parser::parse($htmlsource);
  $xhtml = $html5lib->saveXml();

  $dom = new DOMDocument();
  if (!$dom->loadHTML($xhtml)) {
    drupal_set_message(t('Unable to parse html from @url', array('@url' => $url)), 'error');
    return $prefix . $content . $suffix;
  }

  // Get the result's html table element.
  $xpath = new DOMXPath($dom);
  $elems = $xpath->query('//div[contains(concat(" ", normalize-space(@class), " "), " project-issue ")]');
  if ($elems->length) {
    $node = $elems->item(0);

    $del = $dom->getElementById('project-summary-container');
    $node->removeChild($del);
    $content .= $dom->saveHTML($node);

    $comments = '';
    $elems = $xpath->query('//div[@id="comments"]//div[@class="comment-inner"]');
    foreach ($elems as $elem) {
      $dels = $xpath->query('.//ul[@class="links"]', $elem);
      if ($dels->length) {
        $del = $dels->item(0);
        $del->parentNode->removeChild($del);
      }

      $c = $dom->saveHTML($elem);
      $c_strip = drupal_strtolower(strip_tags($c));
      $b = FALSE;
      foreach ($search_term as &$search) {
        $b = strpos($c_strip, $search) !== FALSE;
        if ($b) {
          break;
        }
      }
      if ($b) {
        $comments .= '<li>' . $c . '</li>';
      }
    }
    if (!empty($comments)) {
      $content .= '<h2>Related Comments</h2><ol> ' . $comments . '</ol>';
    }
  }

  if ($ajax == 'ajax') {
    $commands = array();
    $commands[] = ajax_command_replace('#' . $container, $prefix . $content . $suffix);

    $page = array(
      '#type' => 'ajax',
      '#commands' => $commands,
    );
    ajax_deliver($page);
  }
  else {
    return $prefix . $content . $suffix;
  }
}
